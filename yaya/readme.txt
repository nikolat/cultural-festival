YAYA as MAKOTO

YAYAをMAKOTOとして使う。

makoto[N].lstという置換用辞書を作ってください。
[N]が0なら\0のトーク、1なら\1のトーク、2なら\p[2]のトークの置換…といったように対応します。
また、makoto.lstという置換用辞書を作ると、全キャラクタ共通で置換されます。
置換用辞書の記述方式は、文の式の書き方と同じく''か""で囲ってください。
改行はできませんが、それ以外は同等です。文が使えれば特に難しい事はないと思います。
正規表現も使えますが、置換前のグループを置換後の文字列から
参照する方法は、$1では無理なようなので、わかりません。

置換辞書の記述例。
// //から始まる行はコメント
// 置換前,置換後のように、間をカンマで区切る
'abc','ABC'
'もうその話は(\d+)度目だ。\1度目っ。', 'その話はもう死んでいる。'
'あー',"%(ANY('い,う,え,お'))ー"

拡張MAKOTOの機能を補うために、指定回文字列を繰り返すREPEATと
ランダム回繰り返すREPEATRANDというユーザー関数をおまけ。


改変・再配布自由。
ライセンスは、文のライセンスに準拠します。


2014/01/04
v1.04
yaya.dllに入れ替え。
名称を「YAYA as MAKOTO」に変更。


2006/10/10
v1.03
・userfunc.dic内のSAORI呼び出し時のリクエストヘッダに余計なスペースがあったので修正
・同SenderがShift_JISになっていたので、AYAMAKOTOにした（実質的な違いはありません）


2006/09/13
v1.02
・サンプル用にssu.dllを同梱
・各キャラクタ変換より前に全キャラクタ共通置換を行うように変更
・各キャラクタ変換用辞書がないと warning W0008 が発生していた問題を修正

・ユーザ関数、SAORI、SAORIEX、NOPを追加。
SAORI('saori.dll', 'argument0', 'argument1'...) というふうに使います。
戻り値はSAORIのResultです。

SAORIEX(&_value, 'saori.dll', 'argument0', 'argument1'...)
&_valueのようにすることで、SAORIのValue0～nを_valueに配列として格納し、
後で使えるようにします。
戻り値はSAORIのResultです。

・NOP
NOP(SAORIEX(&_value, 'saori.dll', 'argument0', 'argument1'...))
のようにすることで、主にSAORIのResult（戻り値）を表示させないようにします。
したがって戻り値はありません。


2006/08/09
v1.01
・全キャラクタ共通置換機能を追加
・エスケープに不具合があったので修正


2006/08/09
v1.00
・リリース初版
